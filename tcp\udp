1.编程题
  分别使用两种创建并启动线程，在线程的处理方法run中随便打印一句话。

2.编程题
  使用继承的方式启动线程默认倒数5个数，主线程等待子线程终止并打印。
-----------------------------------------------------------------------------------


1.线程
1.1 Object类中的方法
   void wait() - 用于让当前线程进入等待状态，直到其它线程调用notify()/notifyAll()。
   void wait(long timeout) - 解除等待状态的方式为调用notify()/notifyAll()方法或者
         - 参数指定的毫秒数过去了。
   
   void notify() - 用于唤醒等待的单个线程。
   void notifyAll() - 用于唤醒等待的所有线程。

2.网络编程的常识
  目前主流的网络通讯软件有：飞秋、QQ、微信、飞信、MSN、陌陌、探探、阿里旺旺、... 
  在吗？

2.1 七层网络模型(了解)
   为了保证数据传递的可靠和安全等等，ISO将数据的传递从逻辑上划分为以下七层：
       应用层、表示层、会话层、传输层、网络层、数据链路层、物理层
   当发送数据时需要按照上述七层模型从上到下一层层进行加包处理再发送；
   当接受数据时需要按照上述七层模型从下到上一层层进行拆包处理再显示；

2.2 常用的网络协议(了解)
   http - 超文本传输协议，主要用于浏览网页时使用
   ftp  - 文件传输协议，主要用于上传和下载文件时使用
   tcp  - 传输控制协议，主要用于网络通信时使用
   udp  - 用户数据报协议，主要用于网络通信时使用
   ip   - 互联网协议，是上述协议的底层协议

   协议 - 本质上就是一种约定，规定了双方应该遵循的规则。

2.3 IP地址(重点)
如：
   192.168.1.1  - 绝大多数路由器的登录地址，进行Mac地址过滤。

   IP地址本质上就是互联网中的唯一地址标识，由32位二进制组成的整数叫做IPv4，当然也有128位二进制组成的整数叫做IPv6，目前主流使用的是IPV4。
   日常生活中采用点分十进制表示法进行描述，也就是将每个字节的二进制位转换为一个十进制整数，不同的十进制整数之间采用小数点隔开。
   如：  0x01020304 => 1.2.3.4
   
查看IP地址的方式：
   windows系统：在dos窗口中使用ipconfig或ipconfig/all命令可以查看。
   linux系统：在终端窗口中使用ifconfig或/sbin/ifconfig命令可以查看。

2.4 端口号(重点)
   IP地址 - 可以定位到具体某一台设备。
   端口号 - 可以定位到具体某一个进程。
   网络编程中提供：IP地址 和 端口号

   端口号本质就是由16位二进制组成的整数，表示的范围是：0 ~ 65535，其中0 ~ 1024通常被系统占用，因此编程从1025开始使用。

3.基于tcp协议的编程模型(重点)
3.1 编程模型
服务器：
   (1)创建ServerSocket类型的对象并提供端口号；
   (2)等待客户端的连接请求，调用accept()方法；
   (3)使用输入输出流进行通信
   (4)关闭Socket
客户端： 
   (1)创建Socket类型的对象并提供服务器的IP地址和端口号；
   (2)使用输入输出流进行通信
   (3)关闭Socket

3.2 相关类和方法的解析
(1)ServerSocket类
   java.net.ServerSocket类用于描述服务器套接字(大插排)。
   ServerSocket(int port) - 根据参数指定端口来构造对象。
   Socket accept() - 用于侦听并接受客户端的连接请求。
   void close() - 用于关闭套接字。

(2)Socket类
   java.net.Socket类用于描述客户端套接字(小插排)，是两台设备通信的端点。
   Socket(String host, int port) - 根据参数指定主机名和端口号构造对象。
   InputStream getInputStream() - 用于获取输入流。
   OutputStream getOutputStream() - 用于获取输出流。
   void close()

练习：
   a.实现服务器向客户端回发消息内容"I received!"，客户端接收消息并打印。
   b.实现客户端向服务器发送的内容由"hello"更改为用户键盘输入的内容。
   c.实现客户端和服务器可以不断地通信，直到客户端发送"bye"时聊天结束。
   d.实现服务器可以不断地响应客户端的连接请求，采用多线程技术。

4.tcp协议和udp协议的比较(笔试题)
4.1 tcp协议
   - 传输控制协议，是一种面向连接的协议，类似于打电话。
   - 建立连接 => 进行通信 => 断开连接
   - 在通信的整个过程中全程保持连接
   - 保证了数据传输的可靠性和有序性
   - 是一种全双工的字节流通信方式
   - 服务器压力大，资源消耗比较多，相对来说发送数据的效率比较低

4.2 udp协议
   - 用户数据报协议，是一种非面向连接的协议，类似于写信。
   - 在通信的过程中不需要保持连接
   - 不保证数据传输的可靠性和有序性
   - 是一种全双工的数据报通信方式
   - 服务器压力小，资源消耗比较少，相对来说发送数据的效率比较高

5.基于udp协议的编程模型(会用即可)
5.1 编程模型
接收方：
   (1)创建DatagramSocket类型的对象，并提供端口号；
   (2)创建DatagramPacket类型的对象，用于接收数据内容；
   (3)接收数据内容，调用receive()方法；
   (4)关闭Socket；
发送方：    
   (1)创建DatagramSocket类型的对象；
   (2)创建DatagramPacket类型的对象，并提供接收方的IP地址和端口号；
   (3)发送数据内容，调用send()方法；
   (4)关闭Socket；
  
5.2 相关类和方法的解析
(1)DatagramSocket类
   java.net.DatagramSocket类用于描述发送或接收方的套接字(码头)。
   DatagramSocket() - 使用无参的方式构造对象。
   DatagramSocket(int port) - 根据参数指定的端口号来构造对象。
   void receive(DatagramPacket p) - 用于接收数据存放到参数指定的包裹。
   void send(DatagramPacket p) - 用于将参数指定的包裹发送出去。
   void close()

(2)DatagramPacket类
   java.net.DatagramPacket类用于描述数据报的包裹(集装箱)。
   DatagramPacket(byte[] buf, int length) 
       - 根据参数指定的数组来接收数据内容并记录到数组中。
   DatagramPacket(byte[] buf, int length, InetAddress address, int port) 
       - 用于将参数指定的数组内容发送到参数指定的地址。
   int getLength() - 用于获取发送或接收的数据大小。
   InetAddress getAddress() - 用于获取发送或接收方的IP地址信息。
   int getPort() - 用于获取发送或接收方的端口信息。

(3)InetAddress类
   java.net.InetAddress类用于描述IP地址信息。
   static InetAddress getLocalHost() - 用于获取本地主机的通信地址。
   static InetAddress getByName(String host) - 用于根据主机名来获取通信地址。
 

 
 
 
  
 
  
 










 
 











