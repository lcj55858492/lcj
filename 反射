

1.反射机制(难点、尽量理解)
如：
   Person p = new Person(); - 声明Person类型的引用指向Person类型的对象
   p.show();                - 调用show()方法

1.1 基本概念
    通常情况下编写的代码都很固定导致运行的结果也很固定，但在某些特殊场合中编写代码时不确定会创建什么对象以及调用什么方法，都由运行阶段传入的参数来决定，该机制就叫反射机制。
    目前主流的框架底层都是采用反射机制实现的。

1.2 Class类
(1)基本概念
   java.lang.Class类的实例用于描述Java应用程序中的类和接口等，也就是代表数据类型。
   该类没有公共构造方法，该类的对象由Java虚拟机和类加载器自动构造。

(2)获取Class对象的方式
   a.使用数据类型.class的方式获取该类型的Class对象；
   b.使用对象.getClass()的方式获取对应的Class对象；
   c.使用包装类.TYPE的方式获取对应基本数据类型的Class对象；
   d.使用Class.forName()的方式获取对应的Class对象；

(3)常用的方法
   static Class<?> forName(String className) 
       - 根据参数指定的类名或接口名来获取对应的Class对象。
       - 参数必须为类或接口的完全限定名，也就是包名.类名。
   T newInstance() 
       - 用于创建该Class对象所表示类的对象。
   Constructor<T> getConstructor(Class<?>... parameterTypes) 
       - 用于获取该Class对象所表示类中的单个公共构造方法。
   Constructor<?>[] getConstructors() 
       - 用于获取该Class对象所表示类中的所有公共构造方法。
   Field getDeclaredField(String name) 
       - 用于获取该Class对象所表示类中的单个成员变量。
   Field[] getDeclaredFields() 
       - 用于获取该Class对象所表示类中的所有成员变量。
   Method getMethod(String name, Class<?>... parameterTypes) 
       - 用于获取该Class对象所表示类中单个公共成员方法。
   Method[] getMethods() 
       - 用于获取该Class对象所表示类中所有公共成员方法。

1.3 Constructor类
(1)基本概念
   java.lang.reflect.Constructor<T>类用于描述获取到的单个构造方法。

(2)常用的方法 
   T newInstance(Object... initargs) 
      - 使用该Constructor对象所表示的构造方法来构造对象，参数用于初始化对象的成员。

1.4 Field类
(1)基本概念
   java.lang.reflect.Field类用于描述获取到的成员变量信息。

(2)常用的方法    
   Object get(Object obj) 
       - 用于获取obj对象中该Field对象所表示成员变量的数据内容并返回。
   void set(Object obj, Object value) 
       - 用于将obj对象中该Field对象所表示成员变量的数值修改为value。
   void setAccessible(boolean flag)
       - 当实参为true时，则取消Java语言的访问检查机制。

1.5 Method类
(1)基本概念
   java.lang.reflect.Method类用于描述获取到的单个成员方法。

(2)常用的方法   
   Object invoke(Object obj, Object... args) 
       - 使用对象obj调用该Method对象所表示的成员方法，args为成员方法的参数。

1.6 JavaBean的概念
   JavaBean本质上就是一种习惯性的编程规范，并不是语法规则，通常要求如下：
      (1)要求满足JavaBean规范的类应该放在一个包中；
      (2)要求满足JavaBean规范的类应该提供无参的构造方法；
      (3)要求满足JavaBean规范的类应该私有化成员变量；
      (4)要求满足JavaBean规范的类应该提供公有的get和set方法；   
      (5)要求满足JavaBean规范的类应该支持序列化操作(新增加)； 

2.常用的设计原则(记住、理解)
2.1 软件开发的流程
   需求分析文档、概要设计文档、详细设计文档、编码和测试、安装和调试、维护和升级   

2.2 常用的设计原则
   开闭原则（OCP） - 对扩展开放，对修改关闭。
                   - 为了提高代码的可维护性和可扩展性。
如：
   public class Person{
       private String name;
       private int age;              
       ...
   }   
   public class SubPerson extends Person{
       private boolean gender;
       ...
   }

   里氏代换原则（LSP）- 任何父类可以出现的地方，子类一定可以出现。
                      - 建议尽量多使用继承和多态。
如：
   public void draw(Shape s){
        s.show();
   }

   draw(new Rect(1, 2, 3, 4));
   
   依赖倒转原则（DIP）- 尽量依赖于抽象类和接口而不是具体实现类。
                      - 抽象类对子类具有强制性和规范性。
如：
   public abstract class A{
      public abstract void show();
   }
   public class SubA extends A{
      public void show(){ ... }
   }

   接口隔离原则（ISP）- 尽量依赖于小接口而不是大接口。
如：
   public interface RunAnimal{
       public abstract void run();
   }
   public interface FlyAnimal{
       public abstract void fly();
   }
   public class Dog implements RunAnimal{
       public void run(){ ... }
       
   }
   
   迪米特法则（最少知道原则 DP）- 一个实体应当尽量少与其它实体之间发生相互作用。
        - 高内聚低耦合
        - 高内聚就是指将一个实体应该有的功能尽量都聚集在该实体的内部。
        - 低耦合就是指一个实体应该尽量减少与其它实体之间的关联度。
   
   合成复用原则（CRP）- 尽量多使用合成复用的方式，而不是继承的方式。
如：
   public class A{
      public void show(){ ...}
   }
   
   public class B{
      private A a;
      public void test(){
          a.show();
      }
   }




